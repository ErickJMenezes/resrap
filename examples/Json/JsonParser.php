<?php

namespace Resrap\Examples\Json;

use Resrap\Component\Parser\Parser;
use Resrap\Component\Scanner\ScannerInterface;
use Resrap\Examples\Json\Ast\JsonArray;
use Resrap\Examples\Json\Ast\JsonBoolean;
use Resrap\Examples\Json\Ast\JsonNull;
use Resrap\Examples\Json\Ast\JsonNumber;
use Resrap\Examples\Json\Ast\JsonObject;
use Resrap\Examples\Json\Ast\JsonPair;
use Resrap\Examples\Json\Ast\JsonString;

/**
 * This file was generated by the grammar compiler.
 * Do not edit it manually.
 */
final class JsonParser
{
    private const array RULES = array (
  0 =>
  array (
    0 => 'json_value',
    1 =>
    array (
      0 => 'json_object',
    ),
  ),
  1 =>
  array (
    0 => 'json_value',
    1 =>
    array (
      0 => 'json_array',
    ),
  ),
  2 =>
  array (
    0 => 'json_value',
    1 =>
    array (
      0 => 'STRING',
    ),
  ),
  3 =>
  array (
    0 => 'json_value',
    1 =>
    array (
      0 => 'NUMBER',
    ),
  ),
  4 =>
  array (
    0 => 'json_value',
    1 =>
    array (
      0 => 'TRUE',
    ),
  ),
  5 =>
  array (
    0 => 'json_value',
    1 =>
    array (
      0 => 'FALSE',
    ),
  ),
  6 =>
  array (
    0 => 'json_value',
    1 =>
    array (
      0 => 'NULL',
    ),
  ),
  7 =>
  array (
    0 => 'json_object',
    1 =>
    array (
      0 => 'LBRACE',
      1 => 'RBRACE',
    ),
  ),
  8 =>
  array (
    0 => 'json_object',
    1 =>
    array (
      0 => 'LBRACE',
      1 => 'json_object_members',
      2 => 'RBRACE',
    ),
  ),
  9 =>
  array (
    0 => 'json_array',
    1 =>
    array (
      0 => 'LBRACKET',
      1 => 'RBRACKET',
    ),
  ),
  10 =>
  array (
    0 => 'json_array',
    1 =>
    array (
      0 => 'LBRACKET',
      1 => 'json_array_elements',
      2 => 'RBRACKET',
    ),
  ),
  11 =>
  array (
    0 => 'json_object_members',
    1 =>
    array (
      0 => 'json_object_pair',
    ),
  ),
  12 =>
  array (
    0 => 'json_object_members',
    1 =>
    array (
      0 => 'json_object_pair',
      1 => 'COMMA',
      2 => 'json_object_members',
    ),
  ),
  13 =>
  array (
    0 => 'json_array_elements',
    1 =>
    array (
      0 => 'json_value',
    ),
  ),
  14 =>
  array (
    0 => 'json_array_elements',
    1 =>
    array (
      0 => 'json_value',
      1 => 'COMMA',
      2 => 'json_array_elements',
    ),
  ),
  15 =>
  array (
    0 => 'json_object_pair',
    1 =>
    array (
      0 => 'STRING',
      1 => 'COLON',
      2 => 'json_value',
    ),
  ),
);
    private const array ACTIONS = array (
  0 =>
  array (
    'STRING' =>
    array (
      0 => 0,
      1 => 3,
    ),
    'NUMBER' =>
    array (
      0 => 0,
      1 => 4,
    ),
    'TRUE' =>
    array (
      0 => 0,
      1 => 5,
    ),
    'FALSE' =>
    array (
      0 => 0,
      1 => 6,
    ),
    'NULL' =>
    array (
      0 => 0,
      1 => 7,
    ),
    'LBRACE' =>
    array (
      0 => 0,
      1 => 8,
    ),
    'LBRACKET' =>
    array (
      0 => 0,
      1 => 9,
    ),
  ),
  1 =>
  array (
    '$' =>
    array (
      0 => 2,
      1 => 0,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 0,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 0,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 0,
    ),
  ),
  2 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 1,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 1,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 1,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 1,
    ),
  ),
  3 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 2,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 2,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 2,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 2,
    ),
  ),
  4 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 3,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 3,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 3,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 3,
    ),
  ),
  5 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 4,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 4,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 4,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 4,
    ),
  ),
  6 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 5,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 5,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 5,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 5,
    ),
  ),
  7 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 6,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 6,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 6,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 6,
    ),
  ),
  8 =>
  array (
    'RBRACE' =>
    array (
      0 => 0,
      1 => 10,
    ),
    'STRING' =>
    array (
      0 => 0,
      1 => 13,
    ),
  ),
  9 =>
  array (
    'RBRACKET' =>
    array (
      0 => 0,
      1 => 14,
    ),
    'STRING' =>
    array (
      0 => 0,
      1 => 3,
    ),
    'NUMBER' =>
    array (
      0 => 0,
      1 => 4,
    ),
    'TRUE' =>
    array (
      0 => 0,
      1 => 5,
    ),
    'FALSE' =>
    array (
      0 => 0,
      1 => 6,
    ),
    'NULL' =>
    array (
      0 => 0,
      1 => 7,
    ),
    'LBRACE' =>
    array (
      0 => 0,
      1 => 8,
    ),
    'LBRACKET' =>
    array (
      0 => 0,
      1 => 9,
    ),
  ),
  10 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 7,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 7,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 7,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 7,
    ),
  ),
  11 =>
  array (
    'RBRACE' =>
    array (
      0 => 0,
      1 => 17,
    ),
  ),
  12 =>
  array (
    'RBRACE' =>
    array (
      0 => 1,
      1 => 11,
    ),
    'COMMA' =>
    array (
      0 => 0,
      1 => 18,
    ),
  ),
  13 =>
  array (
    'COLON' =>
    array (
      0 => 0,
      1 => 19,
    ),
  ),
  14 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 9,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 9,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 9,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 9,
    ),
  ),
  15 =>
  array (
    'RBRACKET' =>
    array (
      0 => 0,
      1 => 20,
    ),
  ),
  16 =>
  array (
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 13,
    ),
    'COMMA' =>
    array (
      0 => 0,
      1 => 21,
    ),
  ),
  17 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 8,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 8,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 8,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 8,
    ),
  ),
  18 =>
  array (
    'STRING' =>
    array (
      0 => 0,
      1 => 13,
    ),
  ),
  19 =>
  array (
    'STRING' =>
    array (
      0 => 0,
      1 => 3,
    ),
    'NUMBER' =>
    array (
      0 => 0,
      1 => 4,
    ),
    'TRUE' =>
    array (
      0 => 0,
      1 => 5,
    ),
    'FALSE' =>
    array (
      0 => 0,
      1 => 6,
    ),
    'NULL' =>
    array (
      0 => 0,
      1 => 7,
    ),
    'LBRACE' =>
    array (
      0 => 0,
      1 => 8,
    ),
    'LBRACKET' =>
    array (
      0 => 0,
      1 => 9,
    ),
  ),
  20 =>
  array (
    '$' =>
    array (
      0 => 1,
      1 => 10,
    ),
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 10,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 10,
    ),
    'RBRACE' =>
    array (
      0 => 1,
      1 => 10,
    ),
  ),
  21 =>
  array (
    'STRING' =>
    array (
      0 => 0,
      1 => 3,
    ),
    'NUMBER' =>
    array (
      0 => 0,
      1 => 4,
    ),
    'TRUE' =>
    array (
      0 => 0,
      1 => 5,
    ),
    'FALSE' =>
    array (
      0 => 0,
      1 => 6,
    ),
    'NULL' =>
    array (
      0 => 0,
      1 => 7,
    ),
    'LBRACE' =>
    array (
      0 => 0,
      1 => 8,
    ),
    'LBRACKET' =>
    array (
      0 => 0,
      1 => 9,
    ),
  ),
  22 =>
  array (
    'RBRACE' =>
    array (
      0 => 1,
      1 => 12,
    ),
  ),
  23 =>
  array (
    'RBRACE' =>
    array (
      0 => 1,
      1 => 15,
    ),
    'COMMA' =>
    array (
      0 => 1,
      1 => 15,
    ),
  ),
  24 =>
  array (
    'RBRACKET' =>
    array (
      0 => 1,
      1 => 14,
    ),
  ),
);
    private const array GOTO = array (
  0 =>
  array (
    'json_object' => 1,
    'json_array' => 2,
  ),
  8 =>
  array (
    'json_object_members' => 11,
    'json_object_pair' => 12,
  ),
  9 =>
  array (
    'json_array_elements' => 15,
    'json_value' => 16,
    'json_object' => 1,
    'json_array' => 2,
  ),
  18 =>
  array (
    'json_object_members' => 22,
    'json_object_pair' => 12,
  ),
  19 =>
  array (
    'json_value' => 23,
    'json_object' => 1,
    'json_array' => 2,
  ),
  21 =>
  array (
    'json_array_elements' => 24,
    'json_value' => 16,
    'json_object' => 1,
    'json_array' => 2,
  ),
  1 =>
  array (
  ),
  2 =>
  array (
  ),
  3 =>
  array (
  ),
  4 =>
  array (
  ),
  5 =>
  array (
  ),
  6 =>
  array (
  ),
  7 =>
  array (
  ),
  10 =>
  array (
  ),
  11 =>
  array (
  ),
  12 =>
  array (
  ),
  13 =>
  array (
  ),
  14 =>
  array (
  ),
  15 =>
  array (
  ),
  16 =>
  array (
  ),
  17 =>
  array (
  ),
  20 =>
  array (
  ),
  22 =>
  array (
  ),
  23 =>
  array (
  ),
  24 =>
  array (
  ),
);
    private Parser $parser;
    public function __construct(ScannerInterface $scanner)
    {
        $callbacks = [];
        $callbacks[0] = function (array $m) { return $m[0]; };
        $callbacks[1] = function (array $m) { return $m[0]; };
        $callbacks[2] = function (array $m) { return new JsonString($m[0]); };
        $callbacks[3] = function (array $m) { return new JsonNumber($m[0]); };
        $callbacks[4] = function (array $m) { return new JsonBoolean($m[0]); };
        $callbacks[5] = function (array $m) { return new JsonBoolean($m[0]); };
        $callbacks[6] = function (array $m) { return new JsonNull(); };
        $callbacks[7] = function (array $m) { return new JsonObject([]); };
        $callbacks[8] = function (array $m) { return new JsonObject($m[1]); };
        $callbacks[9] = function (array $m) { return new JsonArray([]); };
        $callbacks[10] = function (array $m) { return new JsonArray($m[1]); };
        $callbacks[11] = function (array $m) { return [$m[0]]; };
        $callbacks[12] = function (array $m) { return [$m[0], ...$m[2]]; };
        $callbacks[13] = function (array $m) { return [$m[0]]; };
        $callbacks[14] = function (array $m) { return [$m[0], ...$m[2]]; };
        $callbacks[15] = function (array $m) { return new JsonPair($m[0], $m[2]); };
        $this->parser = new Parser(self::ACTIONS, self::GOTO, $callbacks, self::RULES, $scanner);
    }
    public function parse(string $input): mixed
    {
        return $this->parser->parse($input);
    }
}
